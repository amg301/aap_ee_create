# yamllint disable rule:line-length
---
version: 3
# This is the version of ansible-builder this file is designed to work with. It is not related to EE versioning.

options:
  package_manager_path: /usr/bin/microdnf
# This is the recommended default package_manager for UBI containers.

images:
  base_image:
    name: registry.redhat.io/ansible-automation-platform-24/ee-minimal-rhel8:latest
# This is the base image that the EE is going to be built from. We recommend always building from minimal so you only inlcude what you need in the EE. In this example the ee-minimal-rhel8 defines the version of ansible-core that will be used. It is version locked to the platform (https://access.redhat.com/support/policy/updates/ansible-automation-platform#packages-and-versions). AAP 2.4 defines the version of ansible-core as 2.15. If you wanted to use a different version of ansible-core Red Hat now maintains versionless examples such as registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8 which give you options to use ansible-core 2.12 to 2.17.1 as needed.
# This is the image details - https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-minimal-rhel8/63a3338544b6f291781716c7?architecture=amd64&image=65d848862dc82902d5405586

additional_build_files:
  - src: files
    dest: configs
# In this section we are mapping the local ./files folder in this repo into the build context which is created by the ansible-builder tool when it runs. All future references to files in this folder will be "_build/configs"

additional_build_steps:
  prepend_galaxy:
    - COPY _build/configs/ansible.cfg /etc/ansible/ansible.cfg # adds the ansible.cfg with galaxy repos to the EE
  prepend_final:
    - COPY _build/configs/microsoft.repo /etc/yum.repos.d/microsoft.repo # adds a new repo definition for dnf to use
    - COPY _build/configs/krb5.conf /etc/krb5.conf # adds a krb5 file for kerberos authentication to AD on windows systems
    - RUN microdnf install -y crypto-policies-scripts # installs crypto rpms
    - RUN update-crypto-policies --set DEFAULT:AD-SUPPORT # sets policies for kerberos
  append_final:
    - COPY _build/configs/certs/* /etc/pki/ca-trust/source/anchors/ # copies certs to EE
    - RUN update-ca-trust extract # rebuilds the trust using new certs
    - RUN microdnf install --assumeyes powershell
# Here we can perform additional steps. There are several options here and the order of operations matters. Check out the docs for more (https://ansible.readthedocs.io/projects/builder/en/latest/definition/#additional-build-steps). Depending what automation you intend to write these steps or more, may or may not be needed.
# In this example we are doing the following:
# 1) in prepend_galaxy before pulling collections we are updating the ansible.cfg in the EE which includes our preference for content sources. In the example ansible.cfg (./files/ansible.cfg) we are pulling from Red Hat Automation Hub Certified, then Red Hat Automation Hub Validated, then from Galaxy.
# 2) in prepend_final we are adding the microsoft repo to our repo definitions for microdnf, copying our krb5.conf file to allow for kerberos authentications, installing crypto-policies-scripts and setting the crypto policies for kerberos support.
# 3) in append_final we are installing certs, updating the ca-trust in the EE, and installing powershell for linux so that playbooks could use the shell module with pwsh natively.

dependencies:
# Here we are defining the dependencies needed. Notice you can do actions here and in the additional_build_steps seciton.
  system: # system dependencies are RPMs installed by our package_manager. If the dependency is defined by the collection in a bindep.txt file in the collection repo, you DO NOT need to define it here.
    - curl [platform:rpm] # so you can write an automation shell task that calls a url.
    - git [platform:rpm] # so you can write an automaiton shell task that interacts with a git repo.
    - krb5-libs [platform:rpm] # required rpms for kerberos
    - krb5-workstation [platform:rpm] # required rpms for kerberos
  python: # python dependencies. If the dependency is defined by the collection in a requirements.txt file in the collection repo, you DO NOT need to define it here.
    - jmespath
  galaxy: # this is always "galaxy" regardless of the sources defined in the ansible.cfg
    collections: # collections to include in the EE.
      - name: community.general # https://docs.ansible.com/ansible/latest/collections/community/general/index.html
      - name: ansible.posix # https://docs.ansible.com/ansible/latest/collections/ansible/posix/index.html
      - name: community.vmware # https://docs.ansible.com/ansible/latest/collections/community/vmware/index.html
        version: "4.2.0"
      - name: community.windows # https://docs.ansible.com/ansible/latest/collections/community/windows/index.html
        version: "2.1.0"

# Recommendations
# 1) ALWAYS define versions for your collections. Without a version each time you build your EE it will pull the "latest". This could lead to uncontrolled changes to your EE.